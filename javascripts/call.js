// Generated by CoffeeScript 1.7.1
(function() {
  window.Call = (function() {
    Call.states = ['ready', 'outgoingPending', 'incomingPending', 'outgoing', 'incoming', 'fullDuplex', 'closed'];

    function Call(chatEl) {
      this.chatEl = chatEl;
      this.state = 'ready';
    }

    Call.prototype.active = function() {
      return ['ready', 'closed'].indexOf(this.state) === -1;
    };

    Call.prototype.refreshUI = function() {
      var height;
      this.chatEl.data('callButton').css('-webkit-filter', LeapChat.colors[this.state]).attr("aria-label", LeapChat.tooltips[this.state]);
      height = this.active() ? canvasHeight : 0;
      return $(canvas).css({
        top: "-" + height + "px"
      });
    };

    Call.prototype.offerURL = function() {
      var callID, timestamp;
      callID = "abcde";
      timestamp = (new Date).getTime();
      return "" + LeapChat.downloadURL + "#" + callID + "-" + timestamp;
    };

    Call.prototype.sendOffer = function() {
      var input;
      input = this.chatEl.data('textarea');
      input.focus();
      return input.val(input.val() + ("Trying to call you with Leap Motion chat: " + (this.offerURL())));
    };

    Call.prototype.end = function() {
      this.state = 'closed';
      return this.refreshUI();
    };

    Call.prototype.receiveCall = function(callId) {
      if (this.state !== 'ready') {
        return;
      }
      this.state = 'incomingPending';
      console.log("receive call: " + callId);
      return this.refreshUI();
    };

    Call.prototype.callSent = function(callId) {
      if (this.state !== 'ready') {
        return;
      }
      this.state = 'outgoingPending';
      console.log('call outgoing');
      return this.refreshUI();
    };

    Call.prototype.connectionOpen = function(callId) {
      this.state = 'outgoing';
      console.log("connectionOpen: " + callId);
      return this.refreshUI();
    };

    return Call;

  })();

}).call(this);
